name: 构建、上传并发布 Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.version.outputs.full_version }}
      base_version: ${{ steps.version.outputs.base_version }}
      jar_path: ${{ steps.copy-jar.outputs.jar_path }}
      committer: ${{ steps.get-committer.outputs.committer }}
      recent_contributors: ${{ steps.contributors.outputs.recent_contributors }}

    steps:
      - name: 检出仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 30

      - name: 设置 JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Maven 构建
        run: |
          mvn clean package
          ls -l target/
        working-directory: "${{ github.workspace }}/Lengbanlist - main"

      - name: 提取版本号
        id: version
        run: |
          cd "${{ github.workspace }}/Lengbanlist - main"
          FULL_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          BASE_VERSION=$(echo $FULL_VERSION | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')
          echo "full_version=$FULL_VERSION" >> $GITHUB_OUTPUT
          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT

      - name: 获取提交者信息
        id: get-committer
        run: |
          COMMITTER=$(git log -1 --pretty=format:'%an')
          echo "committer=$COMMITTER" >> $GITHUB_OUTPUT

      - name: 获取最近贡献者
        id: contributors
        run: |
          echo "recent_contributors=$(git log --pretty=format:'@%an' -n 10 | sort | uniq | grep -v '@github-actions' | head -n 3 | tr '\n' ' ' | sed 's/ $//')" >> $GITHUB_OUTPUT

      - name: 创建制品目录
        run: |
          mkdir -p "${{ github.workspace }}/artifacts"

      - name: 复制JAR文件
        id: copy-jar
        run: |
          WORKSPACE="${{ github.workspace }}/Lengbanlist - main/target"
          JAR_FILE=$(find "$WORKSPACE" \( -name "Lengbanlist - *.jar" -o -name "Lengbanlist-*.jar" \) -type f | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "错误: 未找到JAR文件"
            exit 1
          fi
          cp "$JAR_FILE" "${{ github.workspace }}/artifacts/Lengbanlist-${{ steps.version.outputs.base_version }}.jar"
          echo "jar_path=${{ github.workspace }}/artifacts/Lengbanlist-${{ steps.version.outputs.base_version }}.jar" >> $GITHUB_OUTPUT

      - name: 上传制品到GitHub
        uses: actions/upload-artifact@v4
        with:
          name: Lengbanlist-${{ steps.version.outputs.base_version }}.jar
          path: "${{ github.workspace }}/artifacts/Lengbanlist-${{ steps.version.outputs.base_version }}.jar"

      - name: 上传到KStore
        run: |
          cd "${{ github.workspace }}/artifacts"
          RESPONSE=$(curl --location --request POST "https://api.kstore.space/api/v1/file/create" \
            --header "X-GitHub-Event: workflow_run" \
            --header "User-Agent: Apifox/1.0.0 (https://apifox.com)" \
            --form "access_token=${{ secrets.OSS }}" \
            --form "fileId=0" \
            --form "name=Lengbanlist-${{ steps.version.outputs.base_version }}.jar")
          DIR_ID=$(echo "$RESPONSE" | jq -r '.data.id')
          UPLOAD_RESPONSE=$(curl --location --request POST "https://upload.kstore.space/upload/$DIR_ID?access_token=${{ secrets.OSS }}" \
            -F "file=@Lengbanlist-${{ steps.version.outputs.base_version }}.jar")
          DOWNLOAD_URL=$(echo "$UPLOAD_RESPONSE" | jq -r '.data.downloadUrl')
          FILE_ID=$(echo "$UPLOAD_RESPONSE" | jq -r '.data.id')
          curl --location --request POST "https://api.kstore.cc/api/v1/file/direct?access_token=${{ secrets.OSS }}" \
            --form "fileId=$FILE_ID" \
            --form "isDirect=1"
          curl --get \
            --data-urlencode "key=${{ secrets.API_KEY }}" \
            --data-urlencode "commit=${{ github.sha }}" \
            --data-urlencode "branch=${{ github.ref }}" \
            --data-urlencode "version=${{ steps.version.outputs.full_version }}" \
            --data-urlencode "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --data-urlencode "link=$DOWNLOAD_URL" \
            --data-urlencode "release=false" \
            "https://service.fpsmaster.top/pushVersion"

      - name: 生成构建摘要
        run: |
          echo "## 构建摘要" > build_summary.md
          echo "### 版本号: ${{ steps.version.outputs.full_version }}" >> build_summary.md
          echo "### 下载地址: $DOWNLOAD_URL" >> build_summary.md
          echo "### 提交者: @${{ steps.get-committer.outputs.committer }}" >> build_summary.md
          echo "### 最近贡献者: ${{ steps.contributors.outputs.recent_contributors }}" >> build_summary.md
          git log -3 --pretty=format:"- %h %s (%an)" >> build_summary.md

      - name: 上传构建摘要
        uses: actions/upload-artifact@v4
        with:
          name: build_summary.md
          path: build_summary.md

  create-release:
    needs: build-and-upload
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: Lengbanlist-${{ needs.build-and-upload.outputs.base_version }}.jar
          path: ${{ github.workspace }}/release-artifacts
      - name: 创建Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build-and-upload.outputs.base_version }}
          release_name: ${{ needs.build-and-upload.outputs.base_version }} Latest
          body: |
            版本 ${{ needs.build-and-upload.outputs.full_version }}
            构建于 $(date -u +"%Y-%m-%dT%H:%M:%SZ")
            
            提交者: @${{ needs.build-and-upload.outputs.committer }}
            最近贡献者: ${{ needs.build-and-upload.outputs.recent_contributors }}
            
            变更日志:
            ${{ github.event.head_commit.message }}
          files: ${{ github.workspace }}/release-artifacts/Lengbanlist-${{ needs.build-and-upload.outputs.base_version }}.jar
          draft: false
          prerelease: false
